<?php
/**
 * ObjectSerializer
 *
 * PHP version 5
 *
 * @category Class
 * @package  SprintPay\Client
 * @author   SprintPay team/ daniel ngantchou
 * @link     https://github.com/sprintpay/sprintpay-api-php-client
 */

/**
 * Sprint-pay payment for developper
 *
 * configuration class for sprint-pay payment api.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sprint-pay@sprint-pay.com
 * source: https://github.com/sprintpay/sprintpay-api-php-client
 * SprintPay rainbow-cl
 */

/**
 * NOTE: This class is auto generated by the sprintPay code generator program.
 * https://github.com/sprintpay/sprintpay-api-php-client
 * Do not edit the class manually.
 */

namespace SprintPay\Client\Model;

use \ArrayAccess;
use \SprintPay\Client\ObjectSerializer;

/**
 * PaymentMobileReponse Class Doc Comment
 *
 * @category Class
 * @package  SprintPay\Client
 * @author   SprintPay Codegen team
 * @link     https://github.com/sprintpay/sprintpay-api-php-client
 */
class PaymentMobileReponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $sprintPayModelName = 'PaymentMobileReponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $sprintPayTypes = [
        'transaction_id' => 'string',
        'status_desc' => 'string',
        'amount' => 'string',
        'reciever_number' => 'string',
        'sender_number' => 'string',
        'operation_type' => 'string',
        'status_code' => 'string',
        'op_comment' => 'string',
        'processing_number' => 'string',
        'operation_date' => 'string',
        'sp_merchand' => 'string',
        'id_sp_marchand' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $sprintPayFormats = [
        'transaction_id' => null,
        'status_desc' => null,
        'amount' => null,
        'reciever_number' => null,
        'sender_number' => null,
        'operation_type' => null,
        'status_code' => null,
        'op_comment' => null,
        'processing_number' => null,
        'operation_date' => null,
        'sp_merchand' => null,
        'id_sp_marchand' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function sprintPayTypes()
    {
        return self::$sprintPayTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function sprintPayFormats()
    {
        return self::$sprintPayFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_id' => 'transactionID',
        'status_desc' => 'statusDesc',
        'amount' => 'amount',
        'reciever_number' => 'recieverNumber',
        'sender_number' => 'senderNumber',
        'operation_type' => 'operationType',
        'status_code' => 'statusCode',
        'op_comment' => 'opComment',
        'processing_number' => 'processingNumber',
        'operation_date' => 'operationDate',
        'sp_merchand' => 'spMerchand',
        'id_sp_marchand' => 'idSpMarchand'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_id' => 'setTransactionId',
        'status_desc' => 'setStatusDesc',
        'amount' => 'setAmount',
        'reciever_number' => 'setRecieverNumber',
        'sender_number' => 'setSenderNumber',
        'operation_type' => 'setOperationType',
        'status_code' => 'setStatusCode',
        'op_comment' => 'setOpComment',
        'processing_number' => 'setProcessingNumber',
        'operation_date' => 'setOperationDate',
        'sp_merchand' => 'setSpMerchand',
        'id_sp_marchand' => 'setIdSpMarchand'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_id' => 'getTransactionId',
        'status_desc' => 'getStatusDesc',
        'amount' => 'getAmount',
        'reciever_number' => 'getRecieverNumber',
        'sender_number' => 'getSenderNumber',
        'operation_type' => 'getOperationType',
        'status_code' => 'getStatusCode',
        'op_comment' => 'getOpComment',
        'processing_number' => 'getProcessingNumber',
        'operation_date' => 'getOperationDate',
        'sp_merchand' => 'getSpMerchand',
        'id_sp_marchand' => 'getIdSpMarchand'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$sprintPayModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['status_desc'] = isset($data['status_desc']) ? $data['status_desc'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['reciever_number'] = isset($data['reciever_number']) ? $data['reciever_number'] : null;
        $this->container['sender_number'] = isset($data['sender_number']) ? $data['sender_number'] : null;
        $this->container['operation_type'] = isset($data['operation_type']) ? $data['operation_type'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['op_comment'] = isset($data['op_comment']) ? $data['op_comment'] : null;
        $this->container['processing_number'] = isset($data['processing_number']) ? $data['processing_number'] : null;
        $this->container['operation_date'] = isset($data['operation_date']) ? $data['operation_date'] : null;
        $this->container['sp_merchand'] = isset($data['sp_merchand']) ? $data['sp_merchand'] : null;
        $this->container['id_sp_marchand'] = isset($data['id_sp_marchand']) ? $data['id_sp_marchand'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id transaction_id
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets status_desc
     *
     * @return string
     */
    public function getStatusDesc()
    {
        return $this->container['status_desc'];
    }

    /**
     * Sets status_desc
     *
     * @param string $status_desc status_desc
     *
     * @return $this
     */
    public function setStatusDesc($status_desc)
    {
        $this->container['status_desc'] = $status_desc;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets reciever_number
     *
     * @return string
     */
    public function getRecieverNumber()
    {
        return $this->container['reciever_number'];
    }

    /**
     * Sets reciever_number
     *
     * @param string $reciever_number reciever_number
     *
     * @return $this
     */
    public function setRecieverNumber($reciever_number)
    {
        $this->container['reciever_number'] = $reciever_number;

        return $this;
    }

    /**
     * Gets sender_number
     *
     * @return string
     */
    public function getSenderNumber()
    {
        return $this->container['sender_number'];
    }

    /**
     * Sets sender_number
     *
     * @param string $sender_number sender_number
     *
     * @return $this
     */
    public function setSenderNumber($sender_number)
    {
        $this->container['sender_number'] = $sender_number;

        return $this;
    }

    /**
     * Gets operation_type
     *
     * @return string
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     *
     * @param string $operation_type operation_type
     *
     * @return $this
     */
    public function setOperationType($operation_type)
    {
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string $status_code status_code
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets op_comment
     *
     * @return string
     */
    public function getOpComment()
    {
        return $this->container['op_comment'];
    }

    /**
     * Sets op_comment
     *
     * @param string $op_comment op_comment
     *
     * @return $this
     */
    public function setOpComment($op_comment)
    {
        $this->container['op_comment'] = $op_comment;

        return $this;
    }

    /**
     * Gets processing_number
     *
     * @return string
     */
    public function getProcessingNumber()
    {
        return $this->container['processing_number'];
    }

    /**
     * Sets processing_number
     *
     * @param string $processing_number processing_number
     *
     * @return $this
     */
    public function setProcessingNumber($processing_number)
    {
        $this->container['processing_number'] = $processing_number;

        return $this;
    }

    /**
     * Gets operation_date
     *
     * @return string
     */
    public function getOperationDate()
    {
        return $this->container['operation_date'];
    }

    /**
     * Sets operation_date
     *
     * @param string $operation_date operation_date
     *
     * @return $this
     */
    public function setOperationDate($operation_date)
    {
        $this->container['operation_date'] = $operation_date;

        return $this;
    }

    /**
     * Gets sp_merchand
     *
     * @return string
     */
    public function getSpMerchand()
    {
        return $this->container['sp_merchand'];
    }

    /**
     * Sets sp_merchand
     *
     * @param string $sp_merchand sp_merchand
     *
     * @return $this
     */
    public function setSpMerchand($sp_merchand)
    {
        $this->container['sp_merchand'] = $sp_merchand;

        return $this;
    }

    /**
     * Gets id_sp_marchand
     *
     * @return string
     */
    public function getIdSpMarchand()
    {
        return $this->container['id_sp_marchand'];
    }

    /**
     * Sets id_sp_marchand
     *
     * @param string $id_sp_marchand id_sp_marchand
     *
     * @return $this
     */
    public function setIdSpMarchand($id_sp_marchand)
    {
        $this->container['id_sp_marchand'] = $id_sp_marchand;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


